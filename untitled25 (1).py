# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a5z5DVB3gCeQOEChY1lImhM5KR3A47Ra
"""

# Fake News Detection using NLP + ML
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import seaborn as sns

# 1. Load dataset
df = pd.read_csv("/content/news.csv")
print("Shape:", df.shape)
print(df.head())

# 2. Data Preprocessing
df = df.dropna()
X = df['text']   # news article text
y = df['label']  # Fake / Real

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# 3. Text Vectorization
tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# 4. Model Training
pac = PassiveAggressiveClassifier(max_iter=50)
pac.fit(X_train_tfidf, y_train)

# 5. Evaluation
y_pred = pac.predict(X_test_tfidf)
score = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {round(score*100,2)}%")

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(5,4))
sns.heatmap(cm, annot=True, cmap="Blues", fmt="d", xticklabels=["Fake","Real"], yticklabels=["Fake","Real"])
plt.title("Confusion Matrix - Fake News Detection")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()